# -*- coding: utf-8 -*-
#
# totor documentation build configuration file, created by
# sphinx-quickstart on Mon Jan 24 17:33:44 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

from __future__ import print_function

import sys, os
import datetime

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.append(os.path.abspath('.'))
try:
  import matplotlib
  sys.path.append( os.path.abspath( os.path.join( os.path.dirname( os.path.dirname( matplotlib.__file__ ) ), 'sphinx', 'ext' ) ) )
except Exception, e:
  print('warning:', e)
from soma import aims

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0,os.path.abspath('sphinxext'))

# -- General configuration -----------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
try:
    # try napoleon which replaces numpydoc (and googledoc),
    # comes with sphinx 1.2
    import sphinx.ext.napoleon
    napoleon = 'sphinx.ext.napoleon'
except ImportError:
    # not available, fallback to numpydoc
    napoleon = 'numpy_ext.numpydoc'
extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.intersphinx',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              'sphinx.ext.ifconfig',
              'sphinx.ext.viewcode',
              'sphinx.ext.extlinks',
              'sphinx.ext.inheritance_diagram',
              'sphinx.ext.autosummary',
              napoleon]

global exit_status
exit_status = 0

def matplotlib_use(backend, warn=True, force=False):
    ''' hack to call matplotlib.use() forcing warn=False and force=True,
    because in some mpl versions (1.3.1) sometimes the backend appears to be
    reset mysteriously to 'Agg' (with capital 'A') while sphinx-gallery expects
    'agg' (with lowercase 'a'), which causes a mismatch, then aborts the
    whole documentation process.
    '''
    matplotlib.use_bak(backend, warn=False, force=True)

try:
    import matplotlib
    import inspect
    # spinx-gallery will be usable with anatomist only if matplotlib.use
    # has the "force" parameter because we need to switch the backend.
    if not sys.platform.startswith('win') \
            and not sys.plaform.startswith('darwin') \
            and 'force' in inspect.getargspec(matplotlib.use).args:
        # hack matplotlob.use()
        matplotlib.use_bak = matplotlib.use
        matplotlib.use = matplotlib_use

        import sphinx_gallery
        extensions.append('sphinx_gallery.gen_gallery')
        gallery_examples = ['anagraphannotate', 'aimsvolumetest',
                            'anaevensimplerviewer', 'control', 'ellipsoid',
                            'fusion3D', 'graph', 'graph_building', 'meshtest',
                            'nomenclatureselection', 'selection', 'volumetest']
        try:
            import OpenGL
            gallery_examples.append('customopenglobject')
        except:
            pass # no OpenGL module: don't run this one
        sphinx_gallery_conf = {
            'examples_dirs': '../examples',   # path to your example scripts
            'gallery_dirs': 'auto_examples',  # path where to save gallery generated examples
            'filename_pattern': '/(%s)\.py' % ')|('.join(gallery_examples),
            #'ignore_pattern': r'/[^abcefgmnst][^/]*\.py$',
        }

        # capture exit to avoid crash on exit cleanup
        def handle_exception(app, opts, exception, stderr=sys.stderr):
            # print('#### handle_exception:', exception, '#####', file=sys.stderr)
            global exit_status
            exit_status = 1
            #import traceback
            #traceback.print_exc()
            from sphinx import cmdline
            cmdline.handle_exception_bak(app, opts, exception,
                                         stderr=sys.stderr)

        def exit():
            import sys
            global exit_status
            status = exit_status
            #print('######## exit:', status, '########', file=sys.stderr)
            os._exit(status)

        import atexit
        from sphinx import cmdline
        # hack sphinx.cmdline.handle_exception to keep track of an error,
        # in order to exit with the correct exit code
        cmdline.handle_exception_bak = cmdline.handle_exception
        cmdline.handle_exception = handle_exception
        atexit.register(exit)
        # neutralize Anatomist.close() to avoid cleanup while some
        # python variables remain somewhere
        # instantiate a headless anatomist in order to build docs without a
        # graphical environment
        import anatomist.headless as hana
        hana.HeadlessAnatomist()
        import anatomist.direct.api as ana
        ana.Anatomist.close = lambda self: None
        matplotlib.use('agg', force=True, warn=False)
except ImportError:
    pass  # no gallery. Oh, well.

try:
    # nbsphinx converts ipython/jupyter notebooks to sphinx docs
    import nbsphinx
    nbsphinx_allow_errors = True
    extensions += ['nbsphinx',
                   'sphinx.ext.mathjax']
except ImportError:
    nbsphinx = None

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'PyAnatomist'
copyright = u'%d, CEA' % datetime.datetime.now().year

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '.'.join( [ str(x) for x in aims.version() ] )
# The full version, including alpha/beta/rc tags.
release = aims.versionString()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of documents that shouldn't be included in the build.
#unused_docs = []

# List of directories, relative to source directory, that shouldn't be searched
# for source files.
exclude_trees = []

# List of directories, relative to source directory, that shouldn't be searched
# for source files.
exclude_patterns = ['examples',
                    "_themes/scikit-learn/static/ML_MAPS_README.rst",
                    '_build',
                    '**.ipynb_checkpoints'] \
                   + templates_path

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  Major themes that come with
# Sphinx are currently 'default' and 'sphinxdoc'.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {  }

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = 'anaicon.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = '../../../../communication/web/trunk/gas/favicon.ico'

html_style = 'custom.css'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# html_sidebars = { '**' : [ 'relations.html' ], }
html_sidebars = { '**' : ['download.html', 'localtoc.html', 'globaltoc.html', 'relations.html',  'sourcelink.html', 'searchbox.html' ], }

# Additional templates that should be rendered to pages, maps page names to
# template names.
html_additional_pages = {}

# If false, no module index is generated.
html_use_modindex = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''

# Output file base name for HTML help builder.
htmlhelp_basename = 'pyanatomistdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'pyanatomist.tex', u'PyAnatomist Documentation',
   u'someone', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_use_modindex = True

autoclass_content = "both"

extlinks = {
  'anatomist': ('../../anatomist-' + version + '/%s',
    'anatomist '),
  'anadox': ('../../anatomist-' + version + '/doxygen/%s',
    'anadox '),
  'anausr': ('../../anatomist-' + version + '/user_doc/%s',
    'anausr '),
  'anadev': ('../../anatomist-' + version + '/dev_doc/%s',
    'anadev '),
  'aimsdox': ('../../aimsdata-' + version + '/doxygen/%s',
    'aimsdox '),
  'aimsdata' : ('../../aimsdata-' + version + '/%s', 'aimsdata '),
  'pyaims': ('../../pyaims-' + version + '/sphinx/%s',
    'pyaims '),
  'soma': ('../../soma-base-' + version + '/sphinx/%s',
    'soma '),
  'cartobdox' : ('../../cartobase-' + version + '/doxygen/%s',
  'cartobdox '),
  'cartoddox' : ('../../cartodata-' + version + '/doxygen/%s',
  'cartoddox '),
  'graphdox' : ('../../graph-' + version + '/doxygen/%s',
  'graphdox '),
}

import soma
docpath = os.path.join(os.path.dirname(os.path.dirname(
    os.path.dirname(soma.__file__))), 'share', 'doc')

intersphinx_mapping = {
    'soma': (os.path.join(docpath, 'soma-base-' + version + '/sphinx'), None),
    'python': ('http://docs.python.org/%d.%d' % sys.version_info[:2], None),
}
